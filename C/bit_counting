from __future__ import division
import numpy as np
import sys
# "cimport" is used to import special compile-time information
# about the numpy module (this is stored in a file numpy.pxd which is
# currently part of the Cython distribution).
cimport numpy as np
# We now need to fix a datatype for our arrays. I've used the variable
# DTYPE for this, which is assigned to the usual NumPy runtime
# type info object.
DTYPE = np.int
# "ctypedef" assigns a corresponding compile-time type to DTYPE_t. For
# every type in the numpy module there's a corresponding compile-time
# type with a _t-suffix.
ctypedef np.int_t DTYPE_t
# "def" can type its arguments but not have a return type. The type of the
# arguments for a "def" function is checked at run-time when entering the
# function.
#
# The arrays f, g and h is typed as "np.ndarray" instances. The only effect
# this has is to a) insert checks that the function arguments really are
# NumPy arrays, and b) make some attribute access like f.shape[0] much
# more efficient. (In this example this doesn't matter though.)
def (np.ndarray[DTYPE_t, ndim=1] f, np.ndarray[DTYPE_t, ndim=1] g, np.int stride):
    #if g.shape[0] % 2 != 1 or g.shape[1] % 2 != 1:
    #    raise ValueError("Only odd dimensions on filter supported")
    assert f.dtype == DTYPE
    assert g.dtype == DTYPE
    # The "cdef" keyword is also used within functions to type variables. It
    # can only be used at the top indendation level (there are non-trivial
    # problems with allowing them in other places, though we'd love to see
    # good and thought out proposals for it).
    #
    # For the indices, the "int" type is used. This corresponds to a C int,
    # other C types (like "unsigned int") could have been used instead.
    # Purists could use "Py_ssize_t" which is the proper Python type for
    # array indices.

    cdef int n_els = f.shape[0]
    if n_els % stride > 0:
        raise ValueError("make sure that n_els is a multiple of stride")
    cdef int n_outputs = g.shape[0]
    if n_outputs != n_els/stride:
        raise ValueError("make sure that n_outputs = n_els/stride")

    #cdef int vmax = f.shape[0]
    #cdef int wmax = f.shape[1]
    #cdef int smax = g.shape[0]
    #cdef int tmax = g.shape[1]
    #cdef int smid = smax // 2
    #cdef int tmid = tmax // 2
    #cdef int xmax = vmax + 2*smid
    #cdef int ymax = wmax + 2*tmid
    #cdef np.ndarray h = np.zeros([xmax, ymax], dtype=DTYPE)
    #cdef int x, y, s, t, v, w

    # It is very important to type ALL your variables. You do not get any
    # warnings if not, only much slower code (they are implicitly typed as
    # Python objects).
    #cdef int s_from, s_to, t_from, t_to
    # For the value variable, we want to use the same data type as is
    # stored in the array, so we use "DTYPE_t" as defined above.
    # NB! An important side-effect of this is that if "value" overflows its
    # datatype size, it will simply wrap around like in C, rather than raise
    # an error like in Python.

    cdef DTYPE_t value, bit_counter, temp_countdown
    for x in range(n_outputs):
        temp_countdown = f[x]
        bit_counter = 0
        while(temp_countdown):
                bit_counter+= temp_countdown & 1
                temp_countdown >>=1
        g[x] = bit_counter
    return

