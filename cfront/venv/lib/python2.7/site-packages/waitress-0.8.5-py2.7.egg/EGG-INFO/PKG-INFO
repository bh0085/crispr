Metadata-Version: 1.1
Name: waitress
Version: 0.8.5
Summary: Waitress WSGI server
Home-page: https://github.com/Pylons/waitress
Author: Chris McDonough
Author-email: chrism@plope.com
License: ZPL 2.1
Description: Waitress is meant to be a production-quality pure-Python WSGI server with very
        acceptable performance.  It has no dependencies except ones which live in the
        Python standard library.  It runs on CPython on Unix and Windows under Python
        2.6+ and Python 3.2+.  It is also known to run on PyPy 1.6.0+ on UNIX.  It
        supports HTTP/1.0 and HTTP/1.1.
        
        For more information, see the "docs" directory of the Waitress package or
        http://docs.pylonsproject.org/projects/waitress/en/latest/ .
        
        
        0.8.5 (2013-05-27)
        ------------------
        
        - Fix runner multisegment imports in some Python 2 revisions (see
          https://github.com/Pylons/waitress/pull/34).
        
        - For compatibility, WSGIServer is now an alias of TcpWSGIServer. The
          signature of BaseWSGIServer is now compatible with WSGIServer pre-0.8.4.
        
        0.8.4 (2013-05-24)
        ------------------
        
        - Add a command-line runner called ``waitress-serve`` to allow Waitress
          to run WSGI applications without any addional machinery. This is
          essentially a thin wrapper around the ``waitress.serve()`` function.
        
        - Allow parallel testing (e.g., under ``detox`` or ``nosetests --processes``)
          using PID-dependent port / socket for functest servers.
        
        - Fix integer overflow errors on large buffers. Thanks to Marcin Kuzminski
          for the patch.  See: https://github.com/Pylons/waitress/issues/22
        
        - Add support for listening on Unix domain sockets.
        
        0.8.3 (2013-04-28)
        ------------------
        
        Features
        ~~~~~~~~
        
        - Add an ``asyncore_loop_timeout`` adjustment value, which controls the
          ``timeout`` value passed to ``asyncore.loop``; defaults to 1.
        
        Bug Fixes
        ~~~~~~~~~
        
        - The default asyncore loop timeout is now 1 second.  This prevents slow
          shutdown on Windows.  See https://github.com/Pylons/waitress/issues/6 .  This
          shouldn't matter to anyone in particular, but it can be changed via the
          ``asyncore_loop_timeout`` adjustment (it used to previously default to 30
          seconds).
        
        - Don't complain if there's a response to a HEAD request that contains a
          Content-Length > 0.  See https://github.com/Pylons/waitress/pull/7.
        
        - Fix bug in HTTP Expect/Continue support.  See
          https://github.com/Pylons/waitress/issues/9 .
        
        
        0.8.2 (2012-11-14)
        ------------------
        
        Bug Fixes
        ~~~~~~~~~
        
        - http://corte.si/posts/code/pathod/pythonservers/index.html pointed out that
          sending a bad header resulted in an exception leading to a 500 response
          instead of the more proper 400 response without an exception.
        
        - Fix a race condition in the test suite.
        
        - Allow "ident" to be used as a keyword to ``serve()`` as per docs.
        
        - Add py33 to tox.ini.
        
        0.8.1 (2012-02-13)
        ------------------
        
        Bug Fixes
        ~~~~~~~~~
        
        - A brown-bag bug prevented request concurrency.  A slow request would block
          subsequent the responses of subsequent requests until the slow request's
          response was fully generated.  This was due to a "task lock" being declared
          as a class attribute rather than as an instance attribute on HTTPChannel.
          Also took the opportunity to move another lock named "outbuf lock" to the
          channel instance rather than the class.  See
          https://github.com/Pylons/waitress/pull/1 .
        
        0.8 (2012-01-31)
        ----------------
        
        Features
        ~~~~~~~~
        
        - Support the WSGI ``wsgi.file_wrapper`` protocol as per
          http://www.python.org/dev/peps/pep-0333/#optional-platform-specific-file-handling.
          Here's a usage example::
        
            import os
        
            here = os.path.dirname(os.path.abspath(__file__))
        
            def myapp(environ, start_response):
                f = open(os.path.join(here, 'myphoto.jpg'), 'rb')
                headers = [('Content-Type', 'image/jpeg')]
                start_response(
                    '200 OK',
                    headers
                    )
                return environ['wsgi.file_wrapper'](f, 32768)
        
          The signature of the file wrapper constructor is ``(filelike_object,
          block_size)``.  Both arguments must be passed as positional (not keyword)
          arguments.  The result of creating a file wrapper should be **returned** as
          the ``app_iter`` from a WSGI application.
        
          The object passed as ``filelike_object`` to the wrapper must be a file-like
          object which supports *at least* the ``read()`` method, and the ``read()``
          method must support an optional size hint argument.  It *should* support
          the ``seek()`` and ``tell()`` methods.  If it does not, normal iteration
          over the filelike object using the provided block_size is used (and copying
          is done, negating any benefit of the file wrapper).  It *should* support a
          ``close()`` method.
        
          The specified ``block_size`` argument to the file wrapper constructor will
          be used only when the ``filelike_object`` doesn't support ``seek`` and/or
          ``tell`` methods.  Waitress needs to use normal iteration to serve the file
          in this degenerate case (as per the WSGI spec), and this block size will be
          used as the iteration chunk size.  The ``block_size`` argument is optional;
          if it is not passed, a default value``32768`` is used.
        
          Waitress will set a ``Content-Length`` header on the behalf of an
          application when a file wrapper with a sufficiently filelike object is used
          if the application hasn't already set one.
        
          The machinery which handles a file wrapper currently doesn't do anything
          particularly special using fancy system calls (it doesn't use ``sendfile``
          for example); using it currently just prevents the system from needing to
          copy data to a temporary buffer in order to send it to the client.  No
          copying of data is done when a WSGI app returns a file wrapper that wraps a
          sufficiently filelike object.  It may do something fancier in the future.
        
        0.7 (2012-01-11)
        ----------------
        
        Features
        ~~~~~~~~
        
        - Default ``send_bytes`` value is now 18000 instead of 9000.  The larger
          default value prevents asyncore from needing to execute select so many
          times to serve large files, speeding up file serving by about 15%-20% or
          so.  This is probably only an optimization for LAN communications, and
          could slow things down across a WAN (due to higher TCP overhead), but we're
          likely to be behind a reverse proxy on a LAN anyway if in production.
        
        - Added an (undocumented) profiling feature to the ``serve()`` command.
        
        0.6.1 (2012-01-08)
        ------------------
        
        Bug Fixes
        ~~~~~~~~~
        
        - Remove performance-sapping call to ``pull_trigger`` in the channel's
          ``write_soon`` method added mistakenly in 0.6.
        
        0.6 (2012-01-07)
        ----------------
        
        Bug Fixes
        ~~~~~~~~~
        
        - A logic error prevented the internal outbuf buffer of a channel from being
          flushed when the client could not accept the entire contents of the output
          buffer in a single succession of socket.send calls when the channel was in
          a "pending close" state.  The socket in such a case would be closed
          prematurely, sometimes resulting in partially delivered content.  This was
          discovered by a user using waitress behind an Nginx reverse proxy, which
          apparently is not always ready to receive data.  The symptom was that he
          received "half" of a large CSS file (110K) while serving content via
          waitress behind the proxy.
        
        0.5 (2012-01-03)
        ----------------
        
        Bug Fixes
        ~~~~~~~~~
        
        - Fix PATH_INFO encoding/decoding on Python 3 (as per PEP 3333, tunnel
          bytes-in-unicode-as-latin-1-after-unquoting).
        
        0.4 (2012-01-02)
        ----------------
        
        Features
        ~~~~~~~~
        
        - Added "design" document to docs.
        
        Bug Fixes
        ~~~~~~~~~
        
        - Set default ``connection_limit`` back to 100 for benefit of maximal
          platform compatibility.
        
        - Normalize setting of ``last_activity`` during send.
        
        - Minor resource cleanups during tests.
        
        - Channel timeout cleanup was broken.
        
        0.3 (2012-01-02)
        ----------------
        
        Features
        ~~~~~~~~
        
        - Dont hang a thread up trying to send data to slow clients.
        
        - Use self.logger to log socket errors instead of self.log_info (normalize).
        
        - Remove pointless handle_error method from channel.
        
        - Queue requests instead of tasks in a channel.
        
        Bug Fixes
        ~~~~~~~~~
        
        - Expect: 100-continue responses were broken.
        
        
        0.2 (2011-12-31)
        ----------------
        
        Bug Fixes
        ~~~~~~~~~
        
        - Set up logging by calling logging.basicConfig() when ``serve`` is called
          (show tracebacks and other warnings to console by default).
        
        - Disallow WSGI applications to set "hop-by-hop" headers (Connection,
          Transfer-Encoding, etc).
        
        - Don't treat 304 status responses specially in HTTP/1.1 mode.
        
        - Remove out of date ``interfaces.py`` file.
        
        - Normalize logging (all output is now sent to the ``waitress`` logger rather
          than in degenerate cases some output being sent directly to stderr).
        
        Features
        ~~~~~~~~
        
        - Support HTTP/1.1 ``Transfer-Encoding: chunked`` responses.
        
        - Slightly better docs about logging.
        
        0.1 (2011-12-30)
        ----------------
        
        - Initial release.
        
        
        
Keywords: waitress wsgi server http
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Web Environment
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Zope Public License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.2
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Topic :: Internet :: WWW/HTTP
